import cors from "cors";
import { typeDefs } from "./graphql-schema";
import { resolvers } from "./resolvers";
import { ApolloServer } from "apollo-server-express";
import express from "express";
import { v1 as neo4j } from "neo4j-driver";
import { makeAugmentedSchema } from "neo4j-graphql-js";
import dotenv from "dotenv";
import jwt from 'jsonwebtoken';
import body from 'body-parser'
import config

// set environment variables from ../.env
dotenv.config();
export const SECRET = config.JWT_SECRET;

const app = express();

/*
 * Create an executable GraphQL schema object from GraphQL type definitions
 * including autogenerated queries and mutations.
 * Optionally a config object can be included to specify which types to include
 * in generated queries and/or mutations. Read more in the docs:
 * https://grandstack.io/docs/neo4j-graphql-js-api.html#makeaugmentedschemaoptions-graphqlschema
 */

const schema = makeAugmentedSchema({
  typeDefs,
  resolvers
});

/*
 * Create a Neo4j driver instance to connect to the database
 * using credentials specified as environment variables
 * with fallback to defaults
 */
const driver = neo4j.driver(
  config.NEO4J_URI,
  neo4j.auth.basic(
    config.NEO4J_USER,
    config.NEO4J_PASSWORD
  )
);

/*
 * Create a new ApolloServer instance, serving the GraphQL schema
 * created using makeAugmentedSchema above and injecting the Neo4j driver
 * instance into the context object so it is available in the
 * generated resolvers to connect to the database.
 */


 // Custom middleware to add a user object to the server requests
const injectUser = async req => {
  const token = req.headers.authorization;
  try {
    const { user } = await jwt.verify(token, SECRET);
    req.user = user;

  } catch (error) {
    // error
  }
  req.next();
};

// Load facebook auth only if credentials present in .env
if (config.FB_ID && config.FB_SECRET) {
  require("./auth/facebook");
}
// Add Middleware to our Express server
app.use(cors());
app.use("*", injectUser);

const server = new ApolloServer({
  context: ({ req }) => ({ driver, SECRET, user: req.user || null }),
  schema,
  introspection: true,
  playground: true,
});

// Specify port and path for GraphQL endpoint
const port = config.GRAPHQL_LISTEN_PORT;
const path = "/graphql";

/*
* Optionally, apply Express middleware for authentication, etc
* This also also allows us to specify a path for the GraphQL endpoint
*/
server.applyMiddleware({app, path});

app.listen({port, path}, () => {
  console.log('GraphQL server ready at '+config.BASE_URL+path);
});
