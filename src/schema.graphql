type User {
  email: String!
  reputation: Int!
  votes: [VOTED_BY!]! 
}

type Topic {
  name: String!
  parents: [IS_PART_OF!]!
}

type Resource {
  name: String
  urls: [String!]!
  amosGames: [FOR_RESOURCE!]!
}

type AmosGame {
  id: ID!
  resource: FOR_RESOURCE!
  votes: [VOTED_BY!]!
}

# type AmosGameTopic implements AmosGame {
#   # Fsr this type doesn't compile  if it  doesn't have an id:
#   id: ID!
#   resource: Resource! @relation(name: "FOR_RESOURCE", direction: "OUT")
#   topic: Topic!
#   votes: [User!]! @relation(name: "VOTED_BY", direction: "OUT")
# }

# type AmosGameLearningRequirement implements AmosGame {
#   id: ID!
#   resource: Resource! @relation(name: "FOR_RESOURCE", direction: "OUT")
#   strength: Int!
#   level: Int!
#   topic:  Topic!
#   # votes: [VotedBy!]!
#   # votes: [User!]! @relation(name: "VOTED_BY", direction: "OUT")
# }

# RELATIONS

type VOTED_BY @relation(name: "VOTED_BY") {
  from: AmosGame!
  to: User!
  # TODO: Change to DateTime
  timestamp: Int!
  ownRepAtVote: Int!
  agreeingRep: Int!
}

type IS_PART_OF @relation(name: "IS_PART_OF") {
  from: Topic!
  to: Topic!
}

type FOR_RESOURCE @relation(name: "FOR_RESOURCE") {
  from: AmosGame!
  to: Resource!
}

# Query {
#   User
#   Topic
#   Resource
#   AmosGame
# }